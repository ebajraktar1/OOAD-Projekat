// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SanZan.Data;

namespace SanZan.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220614131921_MigracijaTreca")]
    partial class MigracijaTreca
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SanZan.Models.BezgotovinskaUplata", b =>
                {
                    b.Property<int>("IDUplate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IDKarticeDjelatnika")
                        .HasColumnType("int");

                    b.Property<int>("IDKarticeKlijenta")
                        .HasColumnType("int");

                    b.Property<double>("IznosUplate")
                        .HasColumnType("float");

                    b.HasKey("IDUplate");

                    b.ToTable("BezgotovinskaUplate");
                });

            modelBuilder.Entity("SanZan.Models.DjelatnikTagovi", b =>
                {
                    b.Property<int>("IDDjelatnikTagovi")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IDDjelatnika")
                        .HasColumnType("int");

                    b.Property<int>("IDTaga")
                        .HasColumnType("int");

                    b.HasKey("IDDjelatnikTagovi");

                    b.HasIndex("IDDjelatnika");

                    b.HasIndex("IDTaga");

                    b.ToTable("DjelatnikTagovi");
                });

            modelBuilder.Entity("SanZan.Models.GotovinskaUplata", b =>
                {
                    b.Property<int>("IDUplate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IDDjelatnika")
                        .HasColumnType("int");

                    b.Property<int>("IDKlijenta")
                        .HasColumnType("int");

                    b.Property<double>("IznosUplate")
                        .HasColumnType("float");

                    b.HasKey("IDUplate");

                    b.ToTable("GotovinskaUplata");
                });

            modelBuilder.Entity("SanZan.Models.InfoPitanje", b =>
                {
                    b.Property<int>("IDPitanja")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Odgovor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pitanje")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IDPitanja");

                    b.ToTable("InfoPitanje");
                });

            modelBuilder.Entity("SanZan.Models.Kartica", b =>
                {
                    b.Property<int>("IDKartice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DatumIzdavanjaKartice")
                        .HasColumnType("datetime2");

                    b.Property<int>("IDVlasnikaKartice")
                        .HasColumnType("int");

                    b.Property<double>("IznosNaKartici")
                        .HasColumnType("float");

                    b.HasKey("IDKartice");

                    b.ToTable("Kartica");
                });

            modelBuilder.Entity("SanZan.Models.KonkretniStatus", b =>
                {
                    b.Property<int>("IDStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Marker")
                        .HasColumnType("int");

                    b.HasKey("IDStatus");

                    b.ToTable("KonkretniStatus");
                });

            modelBuilder.Entity("SanZan.Models.Korisnik", b =>
                {
                    b.Property<int>("IDKorisnika")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Banovan")
                        .HasColumnType("bit");

                    b.Property<string>("BrojTelefona")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Djelatnost")
                        .HasColumnType("int");

                    b.Property<int>("IDAdministratora")
                        .HasColumnType("int");

                    b.Property<int>("IDKartice")
                        .HasColumnType("int");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KorisnickoIme")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LokacijaId")
                        .HasColumnType("int");

                    b.Property<string>("Lozinka")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NazivRadnje")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TipDjelatnika")
                        .HasColumnType("int");

                    b.HasKey("IDKorisnika");

                    b.HasIndex("LokacijaId");

                    b.ToTable("Korisnik");
                });

            modelBuilder.Entity("SanZan.Models.Lokacija", b =>
                {
                    b.Property<int>("IDLokacije")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adresa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Grad")
                        .HasColumnType("int");

                    b.Property<int>("Kanton")
                        .HasColumnType("int");

                    b.HasKey("IDLokacije");

                    b.ToTable("Lokacija");
                });

            modelBuilder.Entity("SanZan.Models.ModeratorOglasi", b =>
                {
                    b.Property<int>("IDModeratorOglasi")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("IDModeratora")
                        .HasColumnType("int");

                    b.Property<int?>("IDOglasa")
                        .HasColumnType("int");

                    b.HasKey("IDModeratorOglasi");

                    b.HasIndex("IDModeratora");

                    b.HasIndex("IDOglasa");

                    b.ToTable("ModeratorOglasi");
                });

            modelBuilder.Entity("SanZan.Models.Oglas", b =>
                {
                    b.Property<int>("IDOglasa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IDDjelatnika")
                        .HasColumnType("int");

                    b.Property<int>("LokacijaID")
                        .HasColumnType("int");

                    b.Property<string>("NazivShopa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Ocjena")
                        .HasColumnType("float");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("IDOglasa");

                    b.HasIndex("LokacijaID");

                    b.ToTable("Oglas");
                });

            modelBuilder.Entity("SanZan.Models.Poruka", b =>
                {
                    b.Property<int>("IDPoruke")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IDPosiljaoca")
                        .HasColumnType("int");

                    b.Property<int>("IDPrimaoca")
                        .HasColumnType("int");

                    b.Property<int?>("PosiljaocIDKorisnika")
                        .HasColumnType("int");

                    b.Property<int?>("PrimaocIDKorisnika")
                        .HasColumnType("int");

                    b.Property<string>("Sadrzaj")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Vrijeme")
                        .HasColumnType("datetime2");

                    b.HasKey("IDPoruke");

                    b.HasIndex("PosiljaocIDKorisnika");

                    b.HasIndex("PrimaocIDKorisnika");

                    b.ToTable("Poruka");
                });

            modelBuilder.Entity("SanZan.Models.Prijava", b =>
                {
                    b.Property<int>("IDPrijave")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdministratorIDKorisnika")
                        .HasColumnType("int");

                    b.Property<int>("IDAdministratora")
                        .HasColumnType("int");

                    b.Property<int>("IDPrijavljenog")
                        .HasColumnType("int");

                    b.Property<int>("IDZalbenika")
                        .HasColumnType("int");

                    b.Property<int?>("PrijavljeniIDKorisnika")
                        .HasColumnType("int");

                    b.Property<int>("TipPrijave")
                        .HasColumnType("int");

                    b.Property<int?>("ZalbenikIDKorisnika")
                        .HasColumnType("int");

                    b.HasKey("IDPrijave");

                    b.HasIndex("AdministratorIDKorisnika");

                    b.HasIndex("PrijavljeniIDKorisnika");

                    b.HasIndex("ZalbenikIDKorisnika");

                    b.ToTable("Prijava");
                });

            modelBuilder.Entity("SanZan.Models.Recenzija", b =>
                {
                    b.Property<int>("IDRecenzije")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DjelatnikIDKorisnika")
                        .HasColumnType("int");

                    b.Property<int>("IDRecenzenta")
                        .HasColumnType("int");

                    b.Property<int>("IDjelatnika")
                        .HasColumnType("int");

                    b.Property<string>("Komentar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Ocjena")
                        .HasColumnType("int");

                    b.Property<int?>("RecenzentIDKorisnika")
                        .HasColumnType("int");

                    b.Property<DateTime>("Vrijeme")
                        .HasColumnType("datetime2");

                    b.HasKey("IDRecenzije");

                    b.HasIndex("DjelatnikIDKorisnika");

                    b.HasIndex("RecenzentIDKorisnika");

                    b.ToTable("Recenzija");
                });

            modelBuilder.Entity("SanZan.Models.Statistika", b =>
                {
                    b.Property<int>("IDDjelatnika")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrojPosjeta")
                        .HasColumnType("int");

                    b.Property<int>("BrojPrijava")
                        .HasColumnType("int");

                    b.Property<int>("BrojUcesca")
                        .HasColumnType("int");

                    b.Property<int>("BrojUspjesnihSaradnji")
                        .HasColumnType("int");

                    b.Property<int?>("DjelatnikIDKorisnika")
                        .HasColumnType("int");

                    b.HasKey("IDDjelatnika");

                    b.HasIndex("DjelatnikIDKorisnika");

                    b.ToTable("Statistika");
                });

            modelBuilder.Entity("SanZan.Models.Tag", b =>
                {
                    b.Property<int>("IDTaga")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Djelatnost")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IDTaga");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("SanZan.Models.Zahtjev", b =>
                {
                    b.Property<int>("IDZahtjeva")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Djelatnost")
                        .HasColumnType("int");

                    b.Property<int>("IDKlijenta")
                        .HasColumnType("int");

                    b.Property<int?>("IDLokacija")
                        .HasColumnType("int");

                    b.Property<DateTime>("VrijemeZahtjeva")
                        .HasColumnType("datetime2");

                    b.HasKey("IDZahtjeva");

                    b.HasIndex("IDKlijenta");

                    b.HasIndex("IDLokacija");

                    b.ToTable("Zahtjev");
                });

            modelBuilder.Entity("SanZan.Models.ZahtjevTagovi", b =>
                {
                    b.Property<int>("IDZahtjevTagovi")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IDTaga")
                        .HasColumnType("int");

                    b.Property<int>("IDZahtjev")
                        .HasColumnType("int");

                    b.HasKey("IDZahtjevTagovi");

                    b.HasIndex("IDTaga");

                    b.HasIndex("IDZahtjev");

                    b.ToTable("ZahtjevTagovi");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SanZan.Models.DjelatnikTagovi", b =>
                {
                    b.HasOne("SanZan.Models.Korisnik", "Korisnik")
                        .WithMany()
                        .HasForeignKey("IDDjelatnika")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SanZan.Models.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("IDTaga")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Korisnik");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("SanZan.Models.Korisnik", b =>
                {
                    b.HasOne("SanZan.Models.Lokacija", "Lokacija")
                        .WithMany()
                        .HasForeignKey("LokacijaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lokacija");
                });

            modelBuilder.Entity("SanZan.Models.ModeratorOglasi", b =>
                {
                    b.HasOne("SanZan.Models.Korisnik", "Korisnik")
                        .WithMany()
                        .HasForeignKey("IDModeratora");

                    b.HasOne("SanZan.Models.Oglas", "Oglas")
                        .WithMany()
                        .HasForeignKey("IDOglasa");

                    b.Navigation("Korisnik");

                    b.Navigation("Oglas");
                });

            modelBuilder.Entity("SanZan.Models.Oglas", b =>
                {
                    b.HasOne("SanZan.Models.Lokacija", "Lokacija")
                        .WithMany()
                        .HasForeignKey("LokacijaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lokacija");
                });

            modelBuilder.Entity("SanZan.Models.Poruka", b =>
                {
                    b.HasOne("SanZan.Models.Korisnik", "Posiljaoc")
                        .WithMany()
                        .HasForeignKey("PosiljaocIDKorisnika");

                    b.HasOne("SanZan.Models.Korisnik", "Primaoc")
                        .WithMany()
                        .HasForeignKey("PrimaocIDKorisnika");

                    b.Navigation("Posiljaoc");

                    b.Navigation("Primaoc");
                });

            modelBuilder.Entity("SanZan.Models.Prijava", b =>
                {
                    b.HasOne("SanZan.Models.Korisnik", "Administrator")
                        .WithMany()
                        .HasForeignKey("AdministratorIDKorisnika");

                    b.HasOne("SanZan.Models.Korisnik", "Prijavljeni")
                        .WithMany()
                        .HasForeignKey("PrijavljeniIDKorisnika");

                    b.HasOne("SanZan.Models.Korisnik", "Zalbenik")
                        .WithMany()
                        .HasForeignKey("ZalbenikIDKorisnika");

                    b.Navigation("Administrator");

                    b.Navigation("Prijavljeni");

                    b.Navigation("Zalbenik");
                });

            modelBuilder.Entity("SanZan.Models.Recenzija", b =>
                {
                    b.HasOne("SanZan.Models.Korisnik", "Djelatnik")
                        .WithMany()
                        .HasForeignKey("DjelatnikIDKorisnika");

                    b.HasOne("SanZan.Models.Korisnik", "Recenzent")
                        .WithMany()
                        .HasForeignKey("RecenzentIDKorisnika");

                    b.Navigation("Djelatnik");

                    b.Navigation("Recenzent");
                });

            modelBuilder.Entity("SanZan.Models.Statistika", b =>
                {
                    b.HasOne("SanZan.Models.Korisnik", "Djelatnik")
                        .WithMany()
                        .HasForeignKey("DjelatnikIDKorisnika");

                    b.Navigation("Djelatnik");
                });

            modelBuilder.Entity("SanZan.Models.Zahtjev", b =>
                {
                    b.HasOne("SanZan.Models.Korisnik", "Korisnik")
                        .WithMany()
                        .HasForeignKey("IDKlijenta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SanZan.Models.Lokacija", "Lokacija")
                        .WithMany()
                        .HasForeignKey("IDLokacija");

                    b.Navigation("Korisnik");

                    b.Navigation("Lokacija");
                });

            modelBuilder.Entity("SanZan.Models.ZahtjevTagovi", b =>
                {
                    b.HasOne("SanZan.Models.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("IDTaga")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SanZan.Models.Zahtjev", "Zahtjev")
                        .WithMany()
                        .HasForeignKey("IDZahtjev")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");

                    b.Navigation("Zahtjev");
                });
#pragma warning restore 612, 618
        }
    }
}
